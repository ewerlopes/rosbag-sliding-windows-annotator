#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Ewerton Lopes
# Politecnico di Milano, December, 2016.
import csv
import sys
import os
import time
import json
from itertools import groupby
import numpy as np
import logging
import argparse

### try to load color module for logger ####
try:
    import colorlog

    have_colorlog = True
except ImportError:
    have_colorlog = False
###
##### Logger setup ######
# create logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler(sys.__stdout__)  # Add this
ch.setLevel(logging.DEBUG)

# create formatter
format = '%(asctime)s - %(levelname)-8s - %(message)s'
date_format = '%Y-%m-%d %H:%M:%S'
if have_colorlog and os.isatty(2):
    cformat = '%(log_color)s' + format
    formatter = colorlog.ColoredFormatter(cformat, date_format,
                                          log_colors={'DEBUG': 'blue', 'INFO': 'green',
                                                      'WARNING': 'yellow', 'ERROR': 'red',
                                                      'CRITICAL': 'bold_red'})
else:
    formatter = logging.Formatter(format, date_format)

# add formatter to ch
ch.setFormatter(formatter)
# add ch to logger
logger.addHandler(ch)
#########################

def readArgs():
    """ Deals with the argments"""
    parser = argparse.ArgumentParser(description=
                                     """Debug script. This program is used in order to generate a summary
                                     statistics for the csv files generated by the annotation_parser. Things
                                     like the average amount of overlap of each window and the average deviation.
                                     """)

    parser.add_argument('-f', '--csv-dir', metavar='',
                        dest='csv_dir',
                        action='store', default=os.path.dirname(os.path.abspath(__file__)),
                        help='Specify the csv directory.')
    parser.add_argument('-d', '--deviation', metavar='',
                        dest='deviation', action='store',
                        default=50,
                        help='percentage set point from which evaluate the deviation from.')

    return parser.parse_args()

def getListOfFiles(directory, extension):
    """Load a list of all file names pointed in the directory variable and with the extension"""
    allFiles = [f for f in os.listdir(directory) if
                os.path.isfile(os.path.join(directory, f)) and f.endswith(extension)]
    return allFiles

def getCSVColumnData(filename, columnName="time"):
    """
    Open a csv file and return a list of the windows data given by "columnName".
    Aborts if analyseBy is not a column in the loaded csv data file.
    @param filename :   the name of the csv file to open.
    @:param analyseBy   :   the name of the column to retrieve.
    @:return    :   a list of lists where each item corresponds to the data for
                    a given windows.
    """
    reader = csv.DictReader(open(filename))
    result = {}
    for row in reader:
        for col, value in row.iteritems():
            result.setdefault(col, []).append(value)

    if columnName not in result.keys():
        logger.critical("Column name " + columnName + "do not exist for '" + filename + "' file. Aborting.")
        sys.exit(-1)

    windows = [list(group) for k, group in groupby(result[columnName], lambda x: x == "") if not k]
    return windows

def getStatistics(windows,compareWith=50):
    """Checks the amount of overlap between windows
    @param windows  :   the list of windows data.
    @param compareWith  :   the percentage from which to compare
                            the amount of overlap.
    @:return overlaps   :   a list where each value corresponds to
                            the amount of overlap for the windows.
    @:return meanOfOverlaps : the mean overlap value
    @:return meanDeviation  : the mean deviation value.
    """
    overlaps_diff = []
    overlaps = []
    for i in range(len(windows)):
        if i != len(windows)-1:
            overlap = len(set(windows[i]) & set(windows[i+1])) /      \
                          float(len(set(windows[i+1]))) * 100
            overlaps.append(overlap)
            overlaps_diff.append(overlap - compareWith)
    return overlaps, np.mean(overlaps), np.mean(overlaps_diff)



if __name__ == "__main__":

    args= readArgs()
    files = getListOfFiles(args.csv_dir, ".csv")
    logger.info("\nFiles found:\n"+json.dumps(files, indent=4))

    total_overlap = []
    total_diff = []
    for f in files:
        logger.info("Loading " + f)
        time_windows = getCSVColumnData(os.path.join(args.csv_dir,f))
        logger.info("\tNumber of windows: {}".format(len(time_windows)))
        _, avg_overlap, avg_diff = getStatistics(time_windows)
        total_overlap.append(avg_overlap)
        total_diff.append(avg_diff)
        logger.info("\tAverage Overlap: {:.2f}%".format(avg_overlap))
        logger.info("\tAvg difference: {:.2f}%".format(avg_diff))
    logger.info("Total Average Overlap: {:.2f}%".format(np.mean(total_overlap)))
    logger.info("Total Avg difference: {:.2f}%".format(np.mean(total_diff)))
